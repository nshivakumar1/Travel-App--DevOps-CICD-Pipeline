pipeline {
    agent any

    environment {
        DOCKER_REGISTRY = 'your-docker-registry'
        AWS_REGION = 'us-west-2'
        EKS_CLUSTER_NAME = 'travel-app-cluster'
        SLACK_CHANNEL = '#deployments'
    }

    stages {
        stage('Checkout') {
            steps {
                checkout scm
            }
        }

        stage('Security Scan') {
            parallel {
                stage('SonarQube Analysis') {
                    steps {
                        withSonarQubeEnv('SonarQube') {
                            sh 'sonar-scanner'
                        }
                    }
                }
                stage('Container Scan') {
                    steps {
                        sh 'trivy image ${DOCKER_REGISTRY}/travel-app:${BUILD_NUMBER}'
                    }
                }
                stage('Dependency Check') {
                    steps {
                        sh 'dependency-check --scan . --format HTML --format XML'
                    }
                }
            }
        }

        stage('Build') {
            steps {
                script {
                    // Build Docker image
                    docker.build("${DOCKER_REGISTRY}/travel-app:${BUILD_NUMBER}")
                }
            }
        }

        stage('Test') {
            parallel {
                stage('Unit Tests') {
                    steps {
                        sh 'npm run test:unit'
                    }
                }
                stage('Integration Tests') {
                    steps {
                        sh 'npm run test:integration'
                    }
                }
                stage('Security Tests') {
                    steps {
                        sh 'zap-cli quick-scan --self-contained --start-options "-config api.disablekey=true" http://localhost:3000'
                    }
                }
            }
        }

        stage('Deploy to Dev') {
            when {
                branch 'develop'
            }
            steps {
                script {
                    // Update kubeconfig
                    sh "aws eks update-kubeconfig --region ${AWS_REGION} --name ${EKS_CLUSTER_NAME}"
                    
                    // Deploy using Helm
                    sh """
                        helm upgrade --install travel-app-dev ./helm \
                            --namespace dev \
                            --set image.tag=${BUILD_NUMBER} \
                            --set environment=dev
                    """
                }
            }
        }

        stage('Deploy to Staging') {
            when {
                branch 'staging'
            }
            steps {
                script {
                    // Update kubeconfig
                    sh "aws eks update-kubeconfig --region ${AWS_REGION} --name ${EKS_CLUSTER_NAME}"
                    
                    // Deploy using Helm
                    sh """
                        helm upgrade --install travel-app-staging ./helm \
                            --namespace staging \
                            --set image.tag=${BUILD_NUMBER} \
                            --set environment=staging
                    """
                }
            }
        }

        stage('Deploy to Production') {
            when {
                branch 'main'
            }
            steps {
                script {
                    // Update kubeconfig
                    sh "aws eks update-kubeconfig --region ${AWS_REGION} --name ${EKS_CLUSTER_NAME}"
                    
                    // Deploy using Helm
                    sh """
                        helm upgrade --install travel-app-prod ./helm \
                            --namespace prod \
                            --set image.tag=${BUILD_NUMBER} \
                            --set environment=prod
                    """
                }
            }
        }
    }

    post {
        always {
            // Clean up workspace
            cleanWs()
        }
        success {
            // Send success notification to Slack
            slackSend(
                channel: "${SLACK_CHANNEL}",
                color: 'good',
                message: "Deployment Successful: ${env.JOB_NAME} #${env.BUILD_NUMBER} (${env.BUILD_URL})"
            )
        }
        failure {
            // Send failure notification to Slack
            slackSend(
                channel: "${SLACK_CHANNEL}",
                color: 'danger',
                message: "Deployment Failed: ${env.JOB_NAME} #${env.BUILD_NUMBER} (${env.BUILD_URL})"
            )
        }
    }
} 